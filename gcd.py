from sympy import Poly
from sympy.abc import x

"""
# Этот цикл while многократно делит многочлен p1 и p2 до тех пор,
# пока оставшийся объем оперативной памяти не станет равным нулю.
# Это делается с помощью оператора %, который возвращает остаток от полиномиального деления.
# После каждого деления мы обновляем p1, чтобы он был равен p2, а p2 - чтобы он был равен остатку rem.
# Мы повторяем процесс до тех пор, пока p2 не станет равным 0, что является базовым вариантом для алгоритма.
"""


def poly_gcd(poly1, poly2):
    """
    GCD двух многочленов, используя алгоритм Евклида

    Arguments:
    poly1, poly2 -- два многочлена для нахождения НОД

    Returns:
    НОД из poly1, poly2
    """
    p1 = Poly(poly1, x)
    p2 = Poly(poly2, x)

    while p2 != Poly([0], x):
        rem = p1 % p2
        p1 = p2
        p2 = rem

    return p1.as_expr()


print(poly_gcd('x**3 - 3*x**2 + 3*x - 1', 'x**2 - 1'))
print(poly_gcd('x**4 - 6*x**3 + 11*x**2 - 6*x', 'x**2 - 4'))
print(poly_gcd('x**5 - x**4 - x**3 + x**2', 'x**3 - x'))
