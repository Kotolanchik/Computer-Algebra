import math

"""
Эта функция реализует алгоритм Blum-Blum-Shub (BBS) для генерации псевдослучайных двоичных последовательностей.
 Вот краткое описание того, что он делает:

Функция принимает три аргумента: p, q и count. p и q - это два больших простых числа, 
а count - это количество битов в псевдослучайной последовательности, которую генерирует функция.

Функция __bbs_validate(p, q) вызывается для проверки того, что p и q оба являются простыми и соответствуют 3 mod 4. 
Если какое-либо из этих условий не выполняется, возникает исключение.

Функция вычисляет m = p * q, который используется в последующих вычислениях.

Функция вызывает функцию __generate_x(m) для генерации случайного начального значения x, равного m.

Функция вычисляет x0 = (x ^ 2) mod m, который используется в более поздних вычислениях.

Функция инициализирует результат списка первым значением в псевдослучайной последовательности: (x0^2) mod m.

Функция использует цикл для генерации оставшихся значений в псевдослучайной последовательности.
 Для каждого значения он вычисляет результат[i] = (результат[i-1]^2) mod m.

Наконец, функция создает словарь res, который сопоставляет каждое значение в результате с его младшим значащим битом (0 или 1).

Функция возвращает словарь res, который содержит псевдослучайную двоичную последовательность
 """


def bbs(p, q, count) -> dict:
    __bbs_validate(p, q)
    m = p * q
    x = __generate_x(m)
    x0 = pow(x, 2) % m
    result = [int(math.pow(x0, 2) % m)]
    for i in range(1, count):
        result.append(int(math.pow(result[i - 1], 2) % m))

    res = {}
    for r in result:
        res[r] = r & 1
    return res


def __bbs_validate(p, q):
    if p % 4 != 3:
        raise ValueError(f'p validation error: {p} % 4 != 3')
    if q % 4 != 3:
        raise ValueError(f'q validation error: {q} % 4 != 3')


def __generate_x(m) -> float:
    x = 2
    while True:
        if math.gcd(m, x) == 1:
            return x
